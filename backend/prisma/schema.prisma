// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url  	= env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

// criar uma migration: yarn prisma migrate dev
model User {
  id String @id @default(uuid())
  name String
  email String
  password String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users")
}

model Category{
  id String @id @default(uuid())
  name String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("categories")
  products Product[] //Relacionamento com a tabela Product
}

model Product{
  id String @id @default(uuid())
  name String
  price String
  category_id String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  category Category @relation(fields: [category_id], references: [id]) //Relacionamento com a tabela Category
  orderitems Orderitem[] //Relacionamento com a tabela Orderitem

  @@map("products")
  
}

model Order{
  id String @id @default(uuid())
  table Int
  status Boolean @default(false) //Se o pedido está finalizado
  draft Boolean @default(true) //Se o pedido está em rascunho
  historic Boolean @default(false) //Se o pedido está no histórico
  active Boolean @default(true) //Se o pedido está ativo
  pedido Boolean @default(false) //Se o pedido está em andamento
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  orderitems Orderitem[] //Relacionamento com a tabela Orderitem

  @@map("orders")
}

model Orderitem{
  id String @id @default(uuid())
  order_id String
  product_id String
  quantity Int //Quantidade de produtos
  coment String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order Order @relation(fields: [order_id], references: [id]) //Relacionamento com a tabela Order
  product Product @relation(fields: [product_id], references: [id]) //Relacionamento com a tabela Product

  @@map("orderitems")
}